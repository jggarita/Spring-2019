fun2(10)
fun2(100)
fun2(3)
fun2(4)
fun2(2)
gammainc(1,2)
gammainc(2,1.5)
fun2<-function(x) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,sroot(x)^esig/eps)))-1
curve(sroot(x), 1, 2)
fun <-function (q,A) ((sigma-1)/sigma)*exp((1-q^(esig))/eps)*q-(sigma*q^(-esig)/(sigma*q^(-esig)-1)*(A/eta)*(q/z)^(1/eta))
sroot<-function (a) uniroot(fun, lower=.001, upper=2000,A=a)$root
fun2<- function(a) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,sroot(a)^esig/eps)))-1
fun2(2)
fun2(3)
fun2(5)
fun2(8)
fun2(199)
fun2(19)
fun2(10)
fun2(.1)
fun2(.2)
fun2(1)
#Function
z=100
fun <-function (q,A) ((sigma-1)/sigma)*exp((1-q^(esig))/eps)*q-(sigma*q^(-esig)/(sigma*q^(-esig)-1)*(A/eta)*(q/z)^(1/eta))
sroot<-function (a) uniroot(fun, lower=.001, upper=2000,A=a)$root
fun2<- function(a) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,sroot(a)^esig/eps)))-1
fun2(1)
fun2(100)
fun2(10)
fun2(50)
fun2(150)
fun2(160)
fun2(155)
fun2(152)
fun2(151)
fun2(150)
fun2(150.5)
fun2(145)
fun2(140)
fun2(142)
fun2(143)
fun2(142.5)
fun2(143)
fun2(142.1)
fun2(141.1)
fun2(140)
fun2(141.05)
fun2(141.005)
fun2(141.0005)
fun2(141.00005)
fun2(141)
fun2(140)
fun2(140.5)
fun2(140.9)
fun2(140.99)
fun2(140.7)
fun2(140.4)
fun2(140.6)
#Function
z=1000
fun <-function (q,A) ((sigma-1)/sigma)*exp((1-q^(esig))/eps)*q-(sigma*q^(-esig)/(sigma*q^(-esig)-1)*(A/eta)*(q/z)^(1/eta))
sroot<-function (a) uniroot(fun, lower=.001, upper=2000,A=a)$root
fun2<- function(a) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,sroot(a)^esig/eps)))-1
fun2(140.6)
fun2(1400.6)
fun2(14000.6)
fun2(1000.6)
fun2(1900.6)
fun2(2100.6)
fun2(1800.6)
fun2(1840.6)
uniroot(fun2, lower=.001, upper=2000)$root
uniroot(fun2, lower=.001, upper=2000)$root
curve(sroot(x), 1, 2,tol = 1e-9)
AA=uniroot(fun2, lower=.001, upper=2000000)$root
curve(sroot(x), 1, 2,tol = 1e-2)
uniroot(fun2, lower=.001, upper=2000,tol = 1e-2)$root
uniroot(fun2, lower=1, upper=2000,tol = 1e-2)$root
uniroot(fun2, lower=100, upper=2000,tol = 1e-2)$root
# Begin by deleting any previously defined variables
rm(list = ls())
#Packages
packages <- c("devtools"
,"rpart" # decision tree
,"rpart.plot" # enhanced tree plots
,"expint")
not_installed <- !packages %in% installed.packages()
if (any(not_installed)) install.packages(packages[not_installed])
lapply(packages,require,character.only=TRUE)
sigma=10.18
sigma=10.18
eps=1.4242
eta=.87
esig=.14
10.18^-.14
#Function
z=10
fun <-function (q,A) ((sigma-1)/sigma)*exp((1-q^(esig))/eps)*q-(sigma*q^(-esig)/(sigma*q^(-esig)-1)*(A/eta)*(q/z)^(1/eta))
sroot<-function (a) uniroot(fun, lower=.001, upper=2000,A=a)$root
fun2<- function(a) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,sroot(a)^esig/eps)))-1
uniroot(fun2, lower=100, upper=2000,tol = 1e-2)$root
sroot(1)
sroot(10)
uniroot(fun2, lower=100, upper=2000,tol = 1e-2)$root
sroot(17)
sroot(9)
fun <-function (x) ((sigma-1)/sigma)*exp((1-x^(esig))/eps)*x-(sigma*x^(-esig)/(sigma*x^(-esig)-1))*(A/eta)*(x/z)^(1/eta)
curve(fun(x), 10, 15)
A=10
fun <-function (x) ((sigma-1)/sigma)*exp((1-x^(esig))/eps)*x-(sigma*x^(-esig)/(sigma*x^(-esig)-1))*(A/eta)*(x/z)^(1/eta)
curve(fun(x), 10, 15)
curve(fun(x), 10, 15,A=1)
fun <-function (q,A) ((sigma-1)/sigma)*exp((1-q^(esig))/eps)*q-(sigma*q^(-esig)/(sigma*q^(-esig)-1)*(A/eta)*(q/z)^(1/eta))
fun <-function (q,A) ((sigma-1)/sigma)*exp((1-q^(esig))/eps)*q-(sigma*q^(-esig)/(sigma*q^(-esig)-1)*(A/eta)*(q/z)^(1/eta))
curve(fun(x), 10, 15,A=1)
curve(fun(x,1), 10, 15)
curve(fun(x,10), 10, 15)
curve(fun(x,10), .1, 15)
curve(fun(x,10), .1, 1)
sroot(10)
curve(fun(x,10), .1, 1.5)
sroot(10)
z=seq(3, 19.2, by=.02)
plot(sroot(z))
sroot(3)
#Function
z=10
fun <-function (q,A) ((sigma-1)/sigma)*exp((1-q^(esig))/eps)*q-(sigma*q^(-esig)/(sigma*q^(-esig)-1)*(A/eta)*(q/z)^(1/eta))
sroot<-function (a) uniroot(fun, lower=.001, upper=2000,A=a)$root
fun2<- function(a) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,sroot(a)^esig/eps)))-1
sroot(3)
x=seq(3, 19.2, by=.02)
plot(sroot(x))
sroot(3)
sroot(19.2)
sroot(3.02)
x=seq(3, 6, by=.02)
plot(sroot(x))
sroot(3.07)
sroot(3.5)
sroot(5)
x=seq(3, 6, by=1)
plot(sroot(x))
sroot(4)
sroot(5)
sroot(6)
uniroot(fun, lower=.001, upper=2000,A=1)$root
uniroot(fun, lower=.001, upper=2000,A=3)$root
uniroot(fun, lower=.001, upper=2000,A=5)$root
uniroot(fun2, lower=100, upper=2000, extendInt = "yes")$root
uniroot(fun, lower=100, upper=2000, extendInt = "yes")$root
uniroot(fun, lower=100, upper=2000,A=1, extendInt = "yes")$root
curve(fun(x), .1, 1.5)
curve(sroot(x), .1, 1.5)
#Function
qfunc<-function(A){
fun <-function (q) ((sigma-1)/sigma)*exp((1-q^(esig))/eps)*q-(sigma*q^(-esig)/(sigma*q^(-esig)-1)*(A/eta)*(q/z)^(1/eta))
qq<-uniroot(fun, lower=.001, upper=2000)$root
return(qq)
}
qfunc(1)
qfunc(9)
fun2<- function(a) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,qfunc(a)^esig/eps)))-1
fun2(1)
fun2<- function(a) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,qfunc(a)^esig/eps)))-1
fun2(1)
fun2(9)
uniroot(fun2, lower=.001, upper=2000)$root
curve(fun2(x), .1, 1.5)
curve(qfunc(x), .1, 1.5)
qfunc(.1)
curve(qfunc(x), 9, 1.5)
curve(qfunc(x), 9, 10)
#Function
qfunc<-function(A){
fun <-function (q) ((sigma-1)/sigma)*exp((1-q^(esig))/eps)*q-(sigma*q^(-esig)/(sigma*q^(-esig)-1)*(A/eta)*(q/z)^(1/eta))
qq<-uniroot(fun, lower=.001, upper=2000)$root
return(qq)
}
qfunc(.1)
qfunc(9)
qfunc(10)
curve(qfunc(x), 9, 10)
plot(qfunc(9:9.1))
plot(qfunc(9:9.8))
plot(qfunc(9:12))
plot(qfunc(x))
qfunc(3)
qfunc(4)
qfunc(5)
qfunc(6)
fun <-function (q,A) ((sigma-1)/sigma)*exp((1-q^(esig))/eps)*q-(sigma*q^(-esig)/(sigma*q^(-esig)-1)*(A/eta)*(q/z)^(1/eta))
sroot<-function (a) uniroot(fun, lower=.001, upper=2000,A=a)$root
x=seq(3, 6, by=1)
sroot(x)
#Function
qfunc<-function(A){
fun <-function (q) ((sigma-1)/sigma)*exp((1-q^(esig))/eps)*q-(sigma*q^(-esig)/(sigma*q^(-esig)-1)*(A/eta)*(q/z)^(1/eta))
qq<-uniroot(fun, lower=.001, upper=2000)$root
return(qq)
}
qfunc(1)
fun2<- function(a) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,qfunc(a)^esig/eps)))-1
fun2(1)
(1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,qfunc(1)^esig/eps)))-1
qfunc<-function(aa){
fun2<- function(a) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,qfunc(a)^esig/eps)))-1
a=seq(a, 100000, by=.1)
initval=fun2(a)
i <- 1
while (initval > .000005) {
initval=fun2(a[i+1])
i = i+1
}
aa=a[i]
return(aa)
}
#Function
qfunc<-function(A){
fun <-function (q) ((sigma-1)/sigma)*exp((1-q^(esig))/eps)*q-(sigma*q^(-esig)/(sigma*q^(-esig)-1)*(A/eta)*(q/z)^(1/eta))
qq<-uniroot(fun, lower=.001, upper=2000)$root
return(qq)
}
qfunc2<-function(aa){
fun2<- function(a) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,qfunc(a)^esig/eps)))-1
a=seq(a, 100000, by=.1)
initval=fun2(a)
i <- 1
while (initval > .000005) {
initval=fun2(a[i+1])
i = i+1
}
aa=a[i]
return(aa)
}
qfunc2(1)
qfunc2<-function(aa){
fun2<- function(a) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,qfunc(a)^esig/eps)))-1
a=seq(aa, 100000, by=.1)
initval=fun2(a)
i <- 1
while (initval > .000005) {
initval=fun2(a[i+1])
i = i+1
}
aa=a[i]
return(aa)
}
qfunc2(1)
qfunc2<-function(aa){
fun2<- function(a) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,qfunc(a)^esig/eps)))-1
a=seq(aa, 3, by=.1)
initval=fun2(a)
i <- 1
while (initval > .000005) {
initval=fun2(a[i+1])
i = i+1
}
aa=a[i]
return(aa)
}
qfunc2(1)
a=seq(1, 5, by=1)
qfunc2(1)
qfunc2(2)
fun2(1)
fun2(2)
fun2(3)
fun2(4)
fun2(5)
qfunc2<-function(aa){
fun2<- function(a) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,qfunc(a)^esig/eps)))-1
a=seq(aa, 5, by=1)
initval=fun2(a)
print(initval)
return(aa)
}
qfunc2(1)
return(initval)
qfunc2<-function(aa){
fun2<- function(a) (1+(sigma-1)*exp(1/eps)*eps^(esig^(-1)-1)*(gammainc(esig^-1,1/eps)-gammainc(esig^-1,qfunc(a)^esig/eps)))-1
a=seq(aa, 5, by=1)
initval=fun2(a)
return(initval)
return(aa)
}
fun2(5)
qfunc2(1)
gammainc(1,2)
gammainc(2.5,1,'upper');
gammainc(2.5,1)
gammainc(2,1)
rm(list = ls())
setwd("~/Dropbox/1-RA/TariffAnalysis")
library(WDI)
library(ggplot2)
wb <- WDI(country="all", indicator=c("TM.TAX.MRCH.WM.AR.ZS"), start=1990, end=2017, extra=TRUE)
member <- read_excel("memberyear.xlsx", sheet = "Members")
membplot <- member[c("year", "ccode")]
membplot$yearwto <- membplot$year
membplot$year <- NULL
wb$tariff<-wb$TM.TAX.MRCH.WM.AR.ZS
tariffdata <- wb[c("iso3c", "year","tariff","country")]
### Merge ###
plotdata <- merge(tariffdata, membplot, by.x = "iso3c", by.y = "ccode")
#List new WTO members (after 1995)
newmemb <- plotdata[ which(plotdata$yearwto>1995
& plotdata$yearwto < 2020),]
newmemb <-newmemb[c("iso3c")]
rm(list = ls())
setwd("~/Dropbox/1-RA/TariffAnalysis")
library(WDI)
library(ggplot2)
wb <- WDI(country="all", indicator=c("TM.TAX.MRCH.WM.AR.ZS"), start=1990, end=2017, extra=TRUE)
member <- read_excel("memberyear.xlsx", sheet = "Members")
membplot <- member[c("year", "ccode")]
membplot$yearwto <- membplot$year
library(readxl)
wb <- WDI(country="all", indicator=c("TM.TAX.MRCH.WM.AR.ZS"), start=1990, end=2017, extra=TRUE)
member <- read_excel("memberyear.xlsx", sheet = "Members")
membplot <- member[c("year", "ccode")]
membplot$yearwto <- membplot$year
rm(list = ls())
setwd("~/Dropbox/1-RA/TariffAnalysis")
library(WDI)
library(ggplot2)
library(readxl)
wb <- WDI(country="all", indicator=c("TM.TAX.MRCH.WM.AR.ZS"), start=1990, end=2017, extra=TRUE)
member <- read_excel("memberyear.xlsx", sheet = "Members")
membplot <- member[c("year", "ccode")]
membplot$yearwto <- membplot$year
membplot$year <- NULL
wb$tariff<-wb$TM.TAX.MRCH.WM.AR.ZS
tariffdata <- wb[c("iso3c", "year","tariff","country")]
### Merge ###
plotdata <- merge(tariffdata, membplot, by.x = "iso3c", by.y = "ccode")
#List new WTO members (after 1995)
newmemb <- plotdata[ which(plotdata$yearwto>1995
& plotdata$yearwto < 2020),]
newmemb <-newmemb[c("iso3c")]
newmemb <- na.omit(newmemb)
newmemb <-unique(newmemb)
i <- 1
filename=paste("Tariff",i,".pdf", sep="")
pdf(filename) # Open a pdf file
par(mfrow = c(2, 2))
for (j in seq(i, i+3)) {
countrysel<-subset(plotdata, iso3c==newmemb[j,1])
plot(countrysel$year,countrysel$tariff, ann=FALSE)
mtext(paste(countrysel$country[1]))
abline(v=mean(countrysel$yearwto), col="blue")
#title(ylab=paste(countrysel$country[1]))
#title(main="Tariff rate, applied, weighted mean, all products (%)", font.main=4)
mtext("Tariff rate, applied, weighted mean, all products (%)", outer=TRUE,  cex=1, line=-1)
}
dev.off() # Close a pdf file
i <- 1
while (i<49) {
filename=paste("Tariff",i,".pdf", sep="")
pdf(filename) # Open a pdf file
par(mfrow = c(2, 2))
for (j in seq(i, i+3)) {
countrysel<-subset(plotdata, iso3c==newmemb[j,1])
plot(countrysel$year,countrysel$tariff, ann=FALSE)
mtext(paste(countrysel$country[1]))
abline(v=mean(countrysel$yearwto), col="blue")
#title(ylab=paste(countrysel$country[1]))
#title(main="Tariff rate, applied, weighted mean, all products (%)", font.main=4)
mtext("Tariff rate, applied, weighted mean, all products (%)", outer=TRUE,  cex=1, line=-1)
}
dev.off() # Close a pdf file
i=i+4
}
i <- 1
pdf("Tariffs50.pdf") # Open a pdf file
loop.vector <- 49:50
par(mfrow = c(2, 2))
for (i in loop.vector) {
countrysel<-subset(plotdata, iso3c==newmemb[i,1])
plot(countrysel$year,countrysel$tariff, ann=FALSE)
mtext(paste(countrysel$country[1]))
abline(v=mean(countrysel$yearwto), col="blue")
#title(ylab=paste(countrysel$country[1]))
}
mtext("Tariff rate, applied, weighted mean, all products (%)", outer=TRUE,  cex=1, line=-1)
dev.off() # Close a pdf file
rm(list = ls())
setwd("/Users/jggarita/Spring-2019")
library(tidyverse)
data(mpg)
mpg
# creating a ggplot
# The first line sets up a coordinate system.
# the second line maps displ to x, hwy to y, and draws points
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
# aesthetic mappings can get more complicated:
# here we vary point color by some third variable
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
# Lots of options for point characeristics that can be changed.
# Some aesthetic mappings are more effective than others!
# For example, compare the following:
# size of point
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = class))
# transparency
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
# point shape
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
# adding a title
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = class)) +
labs(title = "Fuel efficiency generally decreases with engine size")
# manually setting an aesthetic property
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
# note: compare with
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
# facets
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
# faceting on two variables
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
# Add smoothing: how is this done?
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = class)) +
geom_smooth(se = FALSE) +
labs(title = "Fuel efficiency generally decreases with engine size")
# adding a caption
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = class)) +
geom_smooth(se = FALSE) +
labs(
title = "Fuel efficiency generally decreases with engine size",
caption = "Data from fueleconomy.gov"
)
# axis labels
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(colour = class)) +
geom_smooth(se = FALSE) +
labs(
x = "Engine displacement (L)",
y = "Highway fuel economy (mpg)",
colour = "Car type"
)
# Density plot: like a histogram
g = ggplot(mpg, aes(x=cty))
g + geom_density(aes(fill=factor(cyl)))
# how about a little more transparency?
g + geom_density(aes(fill=factor(cyl)), alpha=0.6)
# now some labels
g + geom_density(aes(fill=factor(cyl)), alpha=0.6) +
labs(title="Density plot",
subtitle="City Mileage vs Cylinders in Engine",
caption="Source: mpg data set in R",
x="City Gas Mileage",
fill="# Cylinders")
# How about a bar chart?
ggplot(mpg, aes(x=model, y=hwy)) +
geom_bar(stat='identity')
# a little easier to read
ggplot(mpg, aes(x=model, y=hwy)) +
geom_bar(stat='identity') +
coord_flip()
# What's wrong?
mpg
# Let's calculate average MPG across model years
# We do this using pipes:
mpg_summ = mpg %>%
group_by(model)  %>%  # group the data points by model nae
summarize(hwy.mean = mean(hwy))  # calculate a mean for each model
# still not in order...
ggplot(mpg_summ, aes(x=model, y=hwy.mean)) +
geom_bar(stat='identity') +
coord_flip()
# reorder the x labels
ggplot(mpg_summ, aes(x=reorder(model, hwy.mean), y=hwy.mean)) +
geom_bar(stat='identity') +
coord_flip()
source('~/Spring-2019/Basics.R')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidyverse)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyverse")
library(tidyverse)
install.packages(tidyverse)
library(tidyverse)
rm(list = ls())
setwd("/Users/jggarita/Spring-2019")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyverse")
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("tidyverse")
library(tidyverse)
rm(list = ls())
setwd("/Users/jggarita/Spring-2019")
#install.packages("tidyverse")
library(tidyverse)
